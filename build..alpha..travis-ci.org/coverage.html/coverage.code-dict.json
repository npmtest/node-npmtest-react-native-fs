{"/home/travis/build/npmtest/node-npmtest-react-native-fs/test.js":"/* istanbul instrument in package npmtest_react_native_fs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-fs/lib.npmtest_react_native_fs.js":"/* istanbul instrument in package npmtest_react_native_fs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_fs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_fs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-fs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-fs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_fs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_fs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_fs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_fs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_fs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_fs.__dirname + '/lib.npmtest_react_native_fs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-fs/node_modules/react-native-fs/FS.common.js":"'use strict';\n\n// This file supports both iOS and Android\n\n// Stop bluebird going nuts because it can't find \"self\"\nif (typeof self === 'undefined') {\n  global.self = global;\n}\n\nvar RNFSManager = require('react-native').NativeModules.RNFSManager;\nvar NativeAppEventEmitter = require('react-native').NativeAppEventEmitter;\nvar Promise = require('bluebird');\nvar base64 = require('base-64');\nvar utf8 = require('utf8');\n\nvar _readDir = Promise.promisify(RNFSManager.readDir);\nvar _exists = Promise.promisify(RNFSManager.exists);\nvar _stat = Promise.promisify(RNFSManager.stat);\nvar _readFile = Promise.promisify(RNFSManager.readFile);\nvar _writeFile = Promise.promisify(RNFSManager.writeFile);\nvar _moveFile = Promise.promisify(RNFSManager.moveFile);\nvar _unlink = Promise.promisify(RNFSManager.unlink);\nvar _mkdir = Promise.promisify(RNFSManager.mkdir);\nvar _downloadFile = Promise.promisify(RNFSManager.downloadFile);\nvar _uploadFiles = RNFSManager.uploadFiles ? Promise.promisify(RNFSManager.uploadFiles) : function () { return Promise.reject('Not implemented on Android') };\nvar _pathForBundle = Promise.promisify(RNFSManager.pathForBundle);\nvar _getFSInfo = Promise.promisify(RNFSManager.getFSInfo);\n\nvar convertError = (err) => {\n  if (err.isOperational && err.cause) {\n    err = err.cause;\n  }\n\n  var error = new Error(err.description || err.message);\n  error.code = err.code;\n  throw error;\n};\n\nvar NSFileTypeRegular = RNFSManager.NSFileTypeRegular;\nvar NSFileTypeDirectory = RNFSManager.NSFileTypeDirectory;\n\nvar jobId = 0;\n\nvar getJobId = () => {\n  jobId += 1;\n  return jobId;\n};\n\nvar RNFS = {\n\n  readDir(dirpath) {\n    return _readDir(dirpath)\n      .then(files => {\n        return files.map(file => ({\n          name: file.name,\n          path: file.path,\n          size: file.size,\n          isFile: () => file.type === NSFileTypeRegular,\n          isDirectory: () => file.type === NSFileTypeDirectory,\n        }));\n      })\n      .catch(convertError);\n  },\n\n  // Node style version (lowercase d). Returns just the names\n  readdir(dirpath) {\n    return RNFS.readDir(dirpath)\n      .then(files => {\n        return files.map(file => file.name);\n      });\n  },\n\n  stat(filepath) {\n    return _stat(filepath)\n      .then((result) => {\n        return {\n          'ctime': new Date(result.ctime * 1000),\n          'mtime': new Date(result.mtime * 1000),\n          'size': result.size,\n          'mode': result.mode,\n          isFile: () => result.type === NSFileTypeRegular,\n          isDirectory: () => result.type === NSFileTypeDirectory,\n        };\n      })\n      .catch(convertError);\n  },\n\n  exists(filepath) {\n    return _exists(filepath)\n      .catch(convertError);\n  },\n\n  readFile(filepath, encoding) {\n    if (!encoding) encoding = 'utf8';\n\n    return _readFile(filepath)\n      .then((b64) => {\n        var contents;\n\n        if (encoding === 'utf8') {\n          contents = utf8.decode(base64.decode(b64));\n        } else if (encoding === 'ascii') {\n          contents = base64.decode(b64);\n        } else if (encoding === 'base64') {\n          contents = b64;\n        } else {\n          throw new Error('Invalid encoding type \"' + encoding + '\"');\n        }\n\n        return contents;\n      })\n      .catch(convertError);\n  },\n\n  writeFile(filepath, contents, encoding, options) {\n    var b64;\n\n    if (!encoding) encoding = 'utf8';\n\n    if (encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + encoding + '\"');\n    }\n\n    return _writeFile(filepath, b64, options)\n      .catch(convertError);\n  },\n\n  moveFile(filepath, destPath) {\n    return _moveFile(filepath, destPath)\n      .catch(convertError);\n  },\n\n  pathForBundle(bundleName) {\n    return _pathForBundle(bundleName);\n  },\n\n  getFSInfo() {\n    return _getFSInfo()\n      .catch(convertError);\n  },\n\n  unlink(filepath) {\n    return _unlink(filepath)\n      .catch(convertError);\n  },\n\n  mkdir(filepath, excludeFromBackup) {\n    excludeFromBackup = !!excludeFromBackup;\n    return _mkdir(filepath, excludeFromBackup)\n      .catch(convertError);\n  },\n\n  downloadFile(options) {\n    if (arguments.length > 1) {\n      console.warn('Deprecated: Please see updated docs for `downloadFile`');\n\n      options = {\n        fromUrl: arguments[0],\n        toFile: arguments[1],\n        begin: arguments[2],\n        progress: arguments[3]\n      };\n    }\n\n    if (typeof options !== 'object') throw new Error('downloadFile: Invalid value for argument `options`');\n    if (typeof options.fromUrl !== 'string') throw new Error('downloadFile: Invalid value for property `fromUrl`');\n    if (typeof options.toFile !== 'string') throw new Error('downloadFile: Invalid value for property `toFile`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('downloadFile: Invalid value for property `headers`');\n    if (options.background && typeof options.background !== 'boolean') throw new Error('downloadFile: Invalid value for property `background`');\n\n    var jobId = getJobId();\n    var subscriptions = [];\n\n    if (options.begin) {\n      subscriptions.push(NativeAppEventEmitter.addListener('DownloadBegin-' + jobId, options.begin));\n    }\n\n    if (options.progress) {\n      subscriptions.push(NativeAppEventEmitter.addListener('DownloadProgress-' + jobId, options.progress));\n    }\n\n    var bridgeOptions = {\n      jobId: jobId,\n      fromUrl: options.fromUrl,\n      toFile: options.toFile,\n      headers: options.headers || {},\n      background: !!options.background,\n    };\n\n    return _downloadFile(bridgeOptions)\n      .then(res => {\n        subscriptions.forEach(sub => sub.remove());\n        return res;\n      })\n      .catch(convertError);\n  },\n\n  stopDownload(jobId) {\n    RNFSManager.stopDownload(jobId);\n  },\n\n  uploadFiles(options) {\n    var jobId = getJobId();\n    var subscriptions = [];\n\n    if (typeof options !== 'object') throw new Error('uploadFiles: Invalid value for argument `options`');\n    if (typeof options.toUrl !== 'string') throw new Error('uploadFiles: Invalid value for property `toUrl`');\n    if (!Array.isArray(options.files)) throw new Error('uploadFiles: Invalid value for property `files`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('uploadFiles: Invalid value for property `headers`');\n    if (options.fields && typeof options.fields !== 'object') throw new Error('uploadFiles: Invalid value for property `fields`');\n    if (options.method && typeof options.method !== 'string') throw new Error('uploadFiles: Invalid value for property `method`');\n\n    if (options.beginCallback) {\n      subscriptions.push(NativeAppEventEmitter.addListener('UploadBegin-' + jobId, options.beginCallback));\n    }\n\n    if (options.progressCallback) {\n      subscriptions.push(NativeAppEventEmitter.addListener('UploadProgress-' + jobId, options.progressCallback));\n    }\n\n    var bridgeOptions = {\n      jobId: jobId,\n      toUrl: options.toUrl,\n      files: options.files,\n      headers: options.headers || {},\n      fields: options.fields || {},\n      method: options.method || 'POST'\n    };\n\n    return _uploadFiles(bridgeOptions)\n      .then(res => {\n        subscriptions.forEach(sub => sub.remove());\n        return res;\n      });\n  },\n\n  stopUpload(jobId) {\n    RNFSManager.stopUpload(jobId);\n  },\n\n  MainBundlePath: RNFSManager.MainBundlePath,\n  CachesDirectoryPath: RNFSManager.NSCachesDirectoryPath,\n  DocumentDirectoryPath: RNFSManager.NSDocumentDirectoryPath,\n  ExternalDirectoryPath: RNFSManager.NSExternalDirectoryPath,\n  TemporaryDirectoryPath: RNFSManager.NSTemporaryDirectoryPath,\n  LibraryDirectoryPath: RNFSManager.NSLibraryDirectoryPath,\n  PicturesDirectoryPath: RNFSManager.NSPicturesDirectoryPath\n};\n\nmodule.exports = RNFS;\n","/home/travis/build/npmtest/node-npmtest-react-native-fs/node_modules/react-native-fs/IntegrationTests/FSTest.js":"\n'use strict';\n\nvar RCTTestModule = require('NativeModules').TestModule;\nvar React = require('react-native');\nvar {\n  Text,\n  View,\n} = React;\nvar RNFS = require('react-native-fs');\nvar DEBUG = false;\n\n\n// setup in componentDidMount\nvar done;\nvar updateMessage;\n\nfunction runTestCase(description, fn) {\n  updateMessage(description);\n  fn();\n}\n\nfunction expectTrue(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nfunction expectEqual(lhs, rhs, testname) {\n  expectTrue(\n    lhs === rhs,\n    'Error in test ' + testname + ': expected ' + rhs + ', got ' + lhs\n  );\n}\n\nfunction expectFSNoError(err) {\n  expectTrue(err === null, 'Unexpected FS error: ' + JSON.stringify(err));\n}\n\nfunction testWriteAndReadFile() {\n  var path = RNFS.DocumentDirectoryPath + '/test.txt';\n\n  var text = 'Lorem ipsum dolor sit amet';\n  var readText;\n\n  RNFS.writeFile(path, text)\n    .then((success) => {\n      updateMessage('FILE WRITTEN!');\n      return RNFS.readFile(path);\n    })\n    .then((contents) => {\n      updateMessage('FILE READ! Contents:');\n      readText = contents;\n      expectEqual(text, readText, 'testWriteAndReadFile');\n      updateMessage('readFile correctly returned' + readText);\n    })\n    .finally(() => {\n      runTestCase('testCreateAndDeleteFile', testCreateAndDeleteFile);\n    })\n    .done();//promise done needed to throw exception so that in case test fails,error is propagated\n}\n\n\n\nfunction testCreateAndDeleteFile() {\n  var path = RNFS.DocumentDirectoryPath + '/test.txt';\n  var text = 'Lorem ipsum dolor sit amet';\n  var readText;\n\n  RNFS.writeFile(path, text)\n    .then((success) => {\n      updateMessage('FILE CREATED!');\n      return RNFS.unlink(path);\n    })\n    .spread((success, path) => {\n      updateMessage('FILE DELETED!' + success + ',' + path);\n      return RNFS.stat(path);\n    })\n    .then((statResult) => {\n      updateMessage('*****' + statResult);\n      if (statResult.isFile()) {\n        updateMessage('FILE STILL EXISTS');\n      }\n    })\n    .catch((err) => {\n      updateMessage('catch' + err);\n      expectTrue(true,'File is deleted');      \n    })\n    .finally(() => {\n      done(); //testrunners done\n    })\n    .done(); //promise done needed to throw exception so that in case test fails,error is propagated\n}\n\n\n\n\nvar FSTest = React.createClass({\n  getInitialState() {\n      return {\n        messages: 'Initializing...',\n        done: false,\n      };\n    },\n\n    componentDidMount() {\n      done = () => this.setState({\n        done: true\n      }, RCTTestModule.markTestCompleted);\n      updateMessage = (msg) => {\n        this.setState({\n          messages: this.state.messages.concat('\\n' + msg)\n        });\n        DEBUG && console.log(msg);\n      };\n      testWriteAndReadFile();\n    },\n\n    render() {\n      return (\n      <View style={{backgroundColor: 'white', padding: 40}}>\n        <Text>\n          {this.constructor.displayName + ': '}\n          {this.state.done ? 'Done' : 'Testing...'}\n          {'\\n\\n' + this.state.messages}\n        </Text>\n      </View>\n      );\n    }\n});\n\nmodule.exports = FSTest;\n","/home/travis/build/npmtest/node-npmtest-react-native-fs/node_modules/react-native-fs/IntegrationTests/IntegrationTestHarnessTest.js":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n'use strict';\n\nvar RCTTestModule = require('NativeModules').TestModule;\nvar React = require('react-native');\nvar {\n  Text,\n  View,\n} = React;\n\nvar IntegrationTestHarnessTest = React.createClass({\n  propTypes: {\n    shouldThrow: React.PropTypes.bool,\n    waitOneFrame: React.PropTypes.bool,\n  },\n\n  getInitialState() {\n    return {\n      done: false,\n    };\n  },\n\n  componentDidMount() {\n    if (this.props.waitOneFrame) {\n      requestAnimationFrame(this.runTest);\n    } else {\n      this.runTest();\n    }\n  },\n\n  runTest() {\n    if (this.props.shouldThrow) {\n      throw new Error('Throwing error because shouldThrow');\n    }\n    if (!RCTTestModule) {\n      throw new Error('RCTTestModule is not registered.');\n    } else if (!RCTTestModule.markTestCompleted) {\n      throw new Error('RCTTestModule.markTestCompleted not defined.');\n    }\n    this.setState({done: true}, RCTTestModule.markTestCompleted);\n  },\n\n  render() {\n    return (\n      <View style={{backgroundColor: 'white', padding: 40}}>\n        <Text>\n          {this.constructor.displayName + ': '}\n          {this.state.done ? 'Done' : 'Testing...'}\n        </Text>\n      </View>\n    );\n  }\n});\n\nmodule.exports = IntegrationTestHarnessTest;\n","/home/travis/build/npmtest/node-npmtest-react-native-fs/node_modules/react-native-fs/IntegrationTests/IntegrationTestsApp.js":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule IntegrationTestsApp\n */\n'use strict';\n\nvar React = require('react-native');\n\nvar {\n  AppRegistry,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} = React;\n\nvar TESTS = [\n  require('./IntegrationTestHarnessTest'),\n  require('./FSTest')\n];\n\nTESTS.forEach(\n  (test) => AppRegistry.registerComponent(test.displayName, () => test)\n);\n\nvar IntegrationTestsApp = React.createClass({\n  getInitialState: function() {\n    return {\n      test: null,\n    };\n  },\n  render: function() {\n    if (this.state.test) {\n      return (\n        <ScrollView>\n          <this.state.test />\n        </ScrollView>\n      );\n    }\n    return (\n      <View style={styles.container}>\n        <Text style={styles.row}>\n          Click on a test to run it in this shell for easier debugging and\n          development.  Run all tests in the testing envirnment with cmd+U in\n          Xcode.\n        </Text>\n        <View style={styles.separator} />\n        <ScrollView>\n          {TESTS.map((test) => [\n            <TouchableOpacity onPress={() => this.setState({test})}>\n              <View style={styles.row}>\n                <Text style={styles.testName}>\n                  {test.displayName}\n                </Text>\n              </View>\n            </TouchableOpacity>,\n            <View style={styles.separator} />\n          ])}\n        </ScrollView>\n      </View>\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    marginTop: 40,\n    margin: 15,\n  },\n  row: {\n    padding: 10,\n  },\n  testName: {\n    fontWeight: '500',\n  },\n  separator: {\n    height: 1,\n    backgroundColor: '#bbbbbb',\n  },\n});\n\nAppRegistry.registerComponent('IntegrationTestsApp', () => IntegrationTestsApp);\n"}